// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: dealer/dealer.proto

package dealer

import (
	fmt "fmt"
	common "github.com/cargod-bj/b2c-proto-common/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Dealer service

func NewDealerEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Dealer service

type DealerService interface {
	Add(ctx context.Context, in *DealerDto, opts ...client.CallOption) (*common.Response, error)
	Delete(ctx context.Context, in *DealerDto, opts ...client.CallOption) (*common.Response, error)
	Update(ctx context.Context, in *DealerDto, opts ...client.CallOption) (*common.Response, error)
	List(ctx context.Context, in *common.Page, opts ...client.CallOption) (*common.Response, error)
	SyncDealer(ctx context.Context, in *common.Page, opts ...client.CallOption) (*common.Response, error)
	Get(ctx context.Context, in *common.IdLocalDTO, opts ...client.CallOption) (*common.Response, error)
	GetListByIds(ctx context.Context, in *IdsDto, opts ...client.CallOption) (*common.Response, error)
}

type dealerService struct {
	c    client.Client
	name string
}

func NewDealerService(name string, c client.Client) DealerService {
	return &dealerService{
		c:    c,
		name: name,
	}
}

func (c *dealerService) Add(ctx context.Context, in *DealerDto, opts ...client.CallOption) (*common.Response, error) {
	req := c.c.NewRequest(c.name, "Dealer.Add", in)
	out := new(common.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dealerService) Delete(ctx context.Context, in *DealerDto, opts ...client.CallOption) (*common.Response, error) {
	req := c.c.NewRequest(c.name, "Dealer.Delete", in)
	out := new(common.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dealerService) Update(ctx context.Context, in *DealerDto, opts ...client.CallOption) (*common.Response, error) {
	req := c.c.NewRequest(c.name, "Dealer.Update", in)
	out := new(common.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dealerService) List(ctx context.Context, in *common.Page, opts ...client.CallOption) (*common.Response, error) {
	req := c.c.NewRequest(c.name, "Dealer.List", in)
	out := new(common.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dealerService) SyncDealer(ctx context.Context, in *common.Page, opts ...client.CallOption) (*common.Response, error) {
	req := c.c.NewRequest(c.name, "Dealer.SyncDealer", in)
	out := new(common.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dealerService) Get(ctx context.Context, in *common.IdLocalDTO, opts ...client.CallOption) (*common.Response, error) {
	req := c.c.NewRequest(c.name, "Dealer.Get", in)
	out := new(common.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dealerService) GetListByIds(ctx context.Context, in *IdsDto, opts ...client.CallOption) (*common.Response, error) {
	req := c.c.NewRequest(c.name, "Dealer.GetListByIds", in)
	out := new(common.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Dealer service

type DealerHandler interface {
	Add(context.Context, *DealerDto, *common.Response) error
	Delete(context.Context, *DealerDto, *common.Response) error
	Update(context.Context, *DealerDto, *common.Response) error
	List(context.Context, *common.Page, *common.Response) error
	SyncDealer(context.Context, *common.Page, *common.Response) error
	Get(context.Context, *common.IdLocalDTO, *common.Response) error
	GetListByIds(context.Context, *IdsDto, *common.Response) error
}

func RegisterDealerHandler(s server.Server, hdlr DealerHandler, opts ...server.HandlerOption) error {
	type dealer interface {
		Add(ctx context.Context, in *DealerDto, out *common.Response) error
		Delete(ctx context.Context, in *DealerDto, out *common.Response) error
		Update(ctx context.Context, in *DealerDto, out *common.Response) error
		List(ctx context.Context, in *common.Page, out *common.Response) error
		SyncDealer(ctx context.Context, in *common.Page, out *common.Response) error
		Get(ctx context.Context, in *common.IdLocalDTO, out *common.Response) error
		GetListByIds(ctx context.Context, in *IdsDto, out *common.Response) error
	}
	type Dealer struct {
		dealer
	}
	h := &dealerHandler{hdlr}
	return s.Handle(s.NewHandler(&Dealer{h}, opts...))
}

type dealerHandler struct {
	DealerHandler
}

func (h *dealerHandler) Add(ctx context.Context, in *DealerDto, out *common.Response) error {
	return h.DealerHandler.Add(ctx, in, out)
}

func (h *dealerHandler) Delete(ctx context.Context, in *DealerDto, out *common.Response) error {
	return h.DealerHandler.Delete(ctx, in, out)
}

func (h *dealerHandler) Update(ctx context.Context, in *DealerDto, out *common.Response) error {
	return h.DealerHandler.Update(ctx, in, out)
}

func (h *dealerHandler) List(ctx context.Context, in *common.Page, out *common.Response) error {
	return h.DealerHandler.List(ctx, in, out)
}

func (h *dealerHandler) SyncDealer(ctx context.Context, in *common.Page, out *common.Response) error {
	return h.DealerHandler.SyncDealer(ctx, in, out)
}

func (h *dealerHandler) Get(ctx context.Context, in *common.IdLocalDTO, out *common.Response) error {
	return h.DealerHandler.Get(ctx, in, out)
}

func (h *dealerHandler) GetListByIds(ctx context.Context, in *IdsDto, out *common.Response) error {
	return h.DealerHandler.GetListByIds(ctx, in, out)
}
