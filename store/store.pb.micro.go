// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: store/store.proto

package store

import (
	fmt "fmt"
	common "github.com/cargod-bj/b2c-proto-common/common"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/any"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Store service

func NewStoreEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Store service

type StoreService interface {
	Add(ctx context.Context, in *StoreDTO, opts ...client.CallOption) (*common.Response, error)
	List(ctx context.Context, in *StoreCondition, opts ...client.CallOption) (*common.Response, error)
	Update(ctx context.Context, in *StoreDTO, opts ...client.CallOption) (*common.Response, error)
	Delete(ctx context.Context, in *IdDTO, opts ...client.CallOption) (*common.Response, error)
}

type storeService struct {
	c    client.Client
	name string
}

func NewStoreService(name string, c client.Client) StoreService {
	return &storeService{
		c:    c,
		name: name,
	}
}

func (c *storeService) Add(ctx context.Context, in *StoreDTO, opts ...client.CallOption) (*common.Response, error) {
	req := c.c.NewRequest(c.name, "Store.Add", in)
	out := new(common.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeService) List(ctx context.Context, in *StoreCondition, opts ...client.CallOption) (*common.Response, error) {
	req := c.c.NewRequest(c.name, "Store.List", in)
	out := new(common.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeService) Update(ctx context.Context, in *StoreDTO, opts ...client.CallOption) (*common.Response, error) {
	req := c.c.NewRequest(c.name, "Store.Update", in)
	out := new(common.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeService) Delete(ctx context.Context, in *IdDTO, opts ...client.CallOption) (*common.Response, error) {
	req := c.c.NewRequest(c.name, "Store.Delete", in)
	out := new(common.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Store service

type StoreHandler interface {
	Add(context.Context, *StoreDTO, *common.Response) error
	List(context.Context, *StoreCondition, *common.Response) error
	Update(context.Context, *StoreDTO, *common.Response) error
	Delete(context.Context, *IdDTO, *common.Response) error
}

func RegisterStoreHandler(s server.Server, hdlr StoreHandler, opts ...server.HandlerOption) error {
	type store interface {
		Add(ctx context.Context, in *StoreDTO, out *common.Response) error
		List(ctx context.Context, in *StoreCondition, out *common.Response) error
		Update(ctx context.Context, in *StoreDTO, out *common.Response) error
		Delete(ctx context.Context, in *IdDTO, out *common.Response) error
	}
	type Store struct {
		store
	}
	h := &storeHandler{hdlr}
	return s.Handle(s.NewHandler(&Store{h}, opts...))
}

type storeHandler struct {
	StoreHandler
}

func (h *storeHandler) Add(ctx context.Context, in *StoreDTO, out *common.Response) error {
	return h.StoreHandler.Add(ctx, in, out)
}

func (h *storeHandler) List(ctx context.Context, in *StoreCondition, out *common.Response) error {
	return h.StoreHandler.List(ctx, in, out)
}

func (h *storeHandler) Update(ctx context.Context, in *StoreDTO, out *common.Response) error {
	return h.StoreHandler.Update(ctx, in, out)
}

func (h *storeHandler) Delete(ctx context.Context, in *IdDTO, out *common.Response) error {
	return h.StoreHandler.Delete(ctx, in, out)
}
